// file: CarsOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package ontology;

import jade.content.onto.*;
import jade.content.schema.*;

/** file: CarsOntology.java
 * @author ontology bean generator
 * @version 2025/05/10, 15:03:29
 */
public class CarsOntology extends jade.content.onto.Ontology  {

  private static final long serialVersionUID = 5238599874882882387L;

  //NAME
  public static final String ONTOLOGY_NAME = "Cars";
  // The singleton instance of this ontology
  private static Ontology theInstance = new CarsOntology();
  public static Ontology getInstance() {
     return theInstance;
  }


   // VOCABULARY
    public static final String GAMESTATE_STATENAME="stateName";
    public static final String GAMESTATE="GameState";
    public static final String HAND_SCORE="score";
    public static final String HAND_HASCARD="hasCard";
    public static final String HAND="Hand";
    public static final String PARTICIPANT_HASRESULT="hasResult";
    public static final String PARTICIPANT_PARTICIPANTNAME="participantName";
    public static final String PARTICIPANT_HASACTION="hasAction";
    public static final String PARTICIPANT_HASGAMESTATE="hasGameState";
    public static final String PARTICIPANT_HASHAND="hasHand";
    public static final String PARTICIPANT="Participant";
    public static final String PLAYER="Player";
    public static final String RESULT_RESULTNAME="resultName";
    public static final String RESULT="Result";
    public static final String CARD_CARDSUIT="cardSuit";
    public static final String CARD_CARDVALUE="cardValue";
    public static final String CARD="Card";
    public static final String DEALER="Dealer";
    public static final String ACTION_ACTIONNAME="actionName";
    public static final String ACTION="Action";

  /**
   * Constructor
  */
  private CarsOntology(){ 
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    try { 

    // adding Concept(s)
    ConceptSchema actionSchema = new ConceptSchema(ACTION);
    add(actionSchema, ontology.Action.class);
    ConceptSchema dealerSchema = new ConceptSchema(DEALER);
    add(dealerSchema, ontology.Dealer.class);
    ConceptSchema cardSchema = new ConceptSchema(CARD);
    add(cardSchema, ontology.Card.class);
    ConceptSchema resultSchema = new ConceptSchema(RESULT);
    add(resultSchema, ontology.Result.class);
    ConceptSchema playerSchema = new ConceptSchema(PLAYER);
    add(playerSchema, ontology.Player.class);
    ConceptSchema participantSchema = new ConceptSchema(PARTICIPANT);
    add(participantSchema, ontology.Participant.class);
    ConceptSchema handSchema = new ConceptSchema(HAND);
    add(handSchema, ontology.Hand.class);
    ConceptSchema gameStateSchema = new ConceptSchema(GAMESTATE);
    add(gameStateSchema, ontology.GameState.class);

    // adding AgentAction(s)

    // adding AID(s)

    // adding Predicate(s)


    // adding fields
    actionSchema.add(ACTION_ACTIONNAME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    cardSchema.add(CARD_CARDVALUE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    cardSchema.add(CARD_CARDSUIT, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    resultSchema.add(RESULT_RESULTNAME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    participantSchema.add(PARTICIPANT_HASHAND, handSchema, ObjectSchema.MANDATORY);
    participantSchema.add(PARTICIPANT_HASGAMESTATE, gameStateSchema, ObjectSchema.OPTIONAL);
    participantSchema.add(PARTICIPANT_HASACTION, actionSchema, ObjectSchema.OPTIONAL);
    participantSchema.add(PARTICIPANT_PARTICIPANTNAME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    participantSchema.add(PARTICIPANT_HASRESULT, resultSchema, ObjectSchema.OPTIONAL);
    handSchema.add(HAND_HASCARD, cardSchema, 0, ObjectSchema.UNLIMITED);
    handSchema.add(HAND_SCORE, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.MANDATORY);
    gameStateSchema.add(GAMESTATE_STATENAME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);

    // adding name mappings

    // adding inheritance
    dealerSchema.addSuperSchema(participantSchema);
    playerSchema.addSuperSchema(participantSchema);

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
}
